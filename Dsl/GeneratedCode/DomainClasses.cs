//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass IncentiveStrategy
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncentiveStrategy.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncentiveStrategy.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("2018a129-24d6-4702-859a-da98ddcd4606")]
	public partial class IncentiveStrategy : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IncentiveStrategy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2018a129, 0x24d6, 0x4702, 0x85, 0x9a, 0xda, 0x98, 0xdd, 0xcd, 0x46, 0x06);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncentiveStrategy(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncentiveStrategy(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region StrategyName domain property code
		
		/// <summary>
		/// StrategyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid StrategyNameDomainPropertyId = new global::System.Guid(0x59491d0d, 0xb533, 0x40ea, 0xbb, 0x80, 0xe6, 0xfa, 0xd2, 0xf6, 0x9c, 0x11);
		
		/// <summary>
		/// Storage for StrategyName
		/// </summary>
		private global::System.String strategyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StrategyName domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncentiveStrategy.Strategy Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncentiveStrategy/StrategyName.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncentiveStrategy/StrategyName.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("59491d0d-b533-40ea-bb80-e6fad2f69c11")]
		public global::System.String StrategyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return strategyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StrategyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncentiveStrategy.StrategyName domain property.
		/// </summary>
		internal sealed partial class StrategyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<IncentiveStrategy, global::System.String>
		{
			private StrategyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncentiveStrategy.StrategyName domain property value handler.
			/// </summary>
			public static readonly StrategyNamePropertyHandler Instance = new StrategyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncentiveStrategy.StrategyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StrategyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncentiveStrategy element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.strategyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncentiveStrategy element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.strategyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IncentiveElements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IncentiveElements.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveStrategy
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IncentiveElement> IncentiveElements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IncentiveElement>, IncentiveElement>(global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveStrategyDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.IncentiveElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::at.ac.tuwien.dsg.PRINGL.IncentiveElement sourceIncentiveElement1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.IncentiveElement;
			if (sourceIncentiveElement1 != null)
			{
				// Create link for path IncentiveStrategyHasIncentiveElements.IncentiveElements
				this.IncentiveElements.Add(sourceIncentiveElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::at.ac.tuwien.dsg.PRINGL.IncentiveElement sourceIncentiveElement1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.IncentiveElement;
			if (sourceIncentiveElement1 != null)
			{
				// Delete link for path IncentiveStrategyHasIncentiveElements.IncentiveElements
				
				foreach (DslModeling::ElementLink link in global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.GetLinks((global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategy)this, sourceIncentiveElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveStrategyDomainRoleId, global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass IncentiveElement
	/// Description for at.ac.tuwien.dsg.PRINGL.IncentiveElement
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncentiveElement.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncentiveElement.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("02ee9db6-d9e4-4184-9f95-86f5d3e80b03")]
	public abstract partial class IncentiveElement : Container
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IncentiveElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x02ee9db6, 0xd9e4, 0x4184, 0x9f, 0x95, 0x86, 0xf5, 0xd3, 0xe8, 0x0b, 0x03);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IncentiveElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IncentiveStrategy opposite domain role accessor
		/// <summary>
		/// Gets or sets IncentiveStrategy.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveElement
		/// </summary>
		public virtual IncentiveStrategy IncentiveStrategy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveElementDomainRoleId) as IncentiveStrategy;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveElementDomainRoleId, value);
			}
		}
		#endregion
		#region PRINGLParameter opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PRINGLParameter.
		/// Description for at.ac.tuwien.dsg.PRINGL.ElementHasParameters.IncentiveElement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PRINGLParameter> PRINGLParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PRINGLParameter>, PRINGLParameter>(global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.IncentiveElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.PRINGLParameter.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::at.ac.tuwien.dsg.PRINGL.PRINGLParameter sourcePRINGLParameter1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.PRINGLParameter;
			if (sourcePRINGLParameter1 != null)
			{
				// Create link for path ElementHasParameters.PRINGLParameter
				this.PRINGLParameter.Add(sourcePRINGLParameter1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::at.ac.tuwien.dsg.PRINGL.PRINGLParameter sourcePRINGLParameter1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.PRINGLParameter;
			if (sourcePRINGLParameter1 != null)
			{
				// Delete link for path ElementHasParameters.PRINGLParameter
				
				foreach (DslModeling::ElementLink link in global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.GetLinks((global::at.ac.tuwien.dsg.PRINGL.IncentiveElement)this, sourcePRINGLParameter1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.IncentiveElementDomainRoleId, global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.PRINGLParameterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass SimpleDefinition
	/// Description for at.ac.tuwien.dsg.PRINGL.SimpleDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.SimpleDefinition.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.SimpleDefinition.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0ad965b8-4f2f-40a3-9b68-dee6c8bd4388")]
	public abstract partial class SimpleDefinition : PRINGLDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SimpleDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0ad965b8, 0x4f2f, 0x40a3, 0x9b, 0x68, 0xde, 0xe6, 0xc8, 0xbd, 0x43, 0x88);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SimpleDefinition(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PRINGLInstance opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PRINGLInstance.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.DefinitionReferencesInstance.SimpleDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PRINGLInstance> PRINGLInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PRINGLInstance>, PRINGLInstance>(global::at.ac.tuwien.dsg.PRINGL.DefinitionReferencesInstance.SimpleDefinitionDomainRoleId);
			}
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass CompositeDefinition
	/// Description for at.ac.tuwien.dsg.PRINGL.CompositeDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.CompositeDefinition.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.CompositeDefinition.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d1f3bccc-8c67-4cce-b31c-9c08d3049471")]
	public abstract partial class CompositeDefinition : PRINGLDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompositeDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd1f3bccc, 0x8c67, 0x4cce, 0xb3, 0x1c, 0x9c, 0x08, 0xd3, 0x04, 0x94, 0x71);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CompositeDefinition(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass PRINGLDefinition
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLDefinition
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLDefinition.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLDefinition.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("046d0d9f-04cc-4762-a75d-0ceb7fab0f71")]
	public abstract partial class PRINGLDefinition : IncentiveElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PRINGLDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x046d0d9f, 0x04cc, 0x4762, 0xa7, 0x5d, 0x0c, 0xeb, 0x7f, 0xab, 0x0f, 0x71);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PRINGLDefinition(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass PRINGLInstance
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLInstance
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("72011701-93fe-464c-9c8b-4d5762976cc6")]
	public partial class PRINGLInstance : IncentiveElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PRINGLInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x72011701, 0x93fe, 0x464c, 0x9c, 0x8b, 0x4d, 0x57, 0x62, 0x97, 0x6c, 0xc6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PRINGLInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PRINGLInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Metatype domain property code
		
		/// <summary>
		/// Metatype domain property Id.
		/// </summary>
		public static readonly global::System.Guid MetatypeDomainPropertyId = new global::System.Guid(0x8e5fe271, 0xfff2, 0x4d66, 0x86, 0x9d, 0x61, 0x5b, 0x92, 0xdd, 0xeb, 0x66);
		
		/// <summary>
		/// Storage for Metatype
		/// </summary>
		private PRINGLMetatype metatypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Metatype domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLInstance.Metatype
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance/Metatype.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance/Metatype.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8e5fe271-fff2-4d66-869d-615b92ddeb66")]
		public PRINGLMetatype Metatype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return metatypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MetatypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLInstance.Metatype domain property.
		/// </summary>
		internal sealed partial class MetatypePropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLInstance, PRINGLMetatype>
		{
			private MetatypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLInstance.Metatype domain property value handler.
			/// </summary>
			public static readonly MetatypePropertyHandler Instance = new MetatypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLInstance.Metatype domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MetatypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PRINGLMetatype GetValue(PRINGLInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.metatypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLInstance element, PRINGLMetatype newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PRINGLMetatype oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.metatypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SubMetatype domain property code
		
		/// <summary>
		/// SubMetatype domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubMetatypeDomainPropertyId = new global::System.Guid(0x33b80224, 0x249a, 0x4f52, 0xa2, 0x4e, 0xc4, 0x13, 0x71, 0xe8, 0x1f, 0x6c);
		
		/// <summary>
		/// Storage for SubMetatype
		/// </summary>
		private PRINGLSubMetatype subMetatypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SubMetatype domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLInstance.Sub Metatype
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance/SubMetatype.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLInstance/SubMetatype.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("33b80224-249a-4f52-a24e-c41371e81f6c")]
		public PRINGLSubMetatype SubMetatype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subMetatypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubMetatypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLInstance.SubMetatype domain property.
		/// </summary>
		internal sealed partial class SubMetatypePropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLInstance, PRINGLSubMetatype>
		{
			private SubMetatypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLInstance.SubMetatype domain property value handler.
			/// </summary>
			public static readonly SubMetatypePropertyHandler Instance = new SubMetatypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLInstance.SubMetatype domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubMetatypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PRINGLSubMetatype GetValue(PRINGLInstance element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subMetatypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLInstance element, PRINGLSubMetatype newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PRINGLSubMetatype oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subMetatypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SimpleDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SimpleDefinitions.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.DefinitionReferencesInstance.PRINGLInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SimpleDefinition> SimpleDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SimpleDefinition>, SimpleDefinition>(global::at.ac.tuwien.dsg.PRINGL.DefinitionReferencesInstance.PRINGLInstanceDomainRoleId);
			}
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass PRINGLParameter
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLParameter
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56c48b23-3d88-464b-a236-ec20bcd6dc09")]
	public partial class PRINGLParameter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PRINGLParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56c48b23, 0x3d88, 0x464b, 0xa2, 0x36, 0xec, 0x20, 0xbc, 0xd6, 0xdc, 0x09);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PRINGLParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PRINGLParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xe9952c1e, 0x3907, 0x4690, 0xab, 0x3c, 0x5c, 0xaa, 0xdc, 0x1b, 0xd1, 0xa8);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLParameter.Type
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Type.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Type.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e9952c1e-3907-4690-ab3c-5caadc1bd1a8")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLParameter.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLParameter, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLParameter.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLParameter.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PRINGLParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialValue domain property code
		
		/// <summary>
		/// InitialValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialValueDomainPropertyId = new global::System.Guid(0x8aa54349, 0x434b, 0x4dd2, 0x9a, 0x3e, 0xa1, 0x7b, 0x88, 0x67, 0x12, 0xd6);
		
		/// <summary>
		/// Storage for InitialValue
		/// </summary>
		private global::System.String initialValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialValue domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLParameter.Initial Value
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/InitialValue.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/InitialValue.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8aa54349-434b-4dd2-9a3e-a17b886712d6")]
		public global::System.String InitialValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLParameter.InitialValue domain property.
		/// </summary>
		internal sealed partial class InitialValuePropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLParameter, global::System.String>
		{
			private InitialValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLParameter.InitialValue domain property value handler.
			/// </summary>
			public static readonly InitialValuePropertyHandler Instance = new InitialValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLParameter.InitialValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PRINGLParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Propagation domain property code
		
		/// <summary>
		/// Propagation domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropagationDomainPropertyId = new global::System.Guid(0xa072277a, 0x8711, 0x4e3d, 0x9e, 0xa0, 0x7e, 0x1d, 0xce, 0x03, 0x18, 0x0f);
		
		/// <summary>
		/// Storage for Propagation
		/// </summary>
		private global::System.Char propagationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Propagation domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLParameter.Propagation
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Propagation.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Propagation.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a072277a-8711-4e3d-9ea0-7e1dce03180f")]
		public global::System.Char Propagation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propagationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropagationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLParameter.Propagation domain property.
		/// </summary>
		internal sealed partial class PropagationPropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLParameter, global::System.Char>
		{
			private PropagationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLParameter.Propagation domain property value handler.
			/// </summary>
			public static readonly PropagationPropertyHandler Instance = new PropagationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLParameter.Propagation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropagationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Char GetValue(PRINGLParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propagationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLParameter element, global::System.Char newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Char oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propagationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2f1c0f5a, 0x2763, 0x4cee, 0x90, 0xb8, 0x23, 0x51, 0xa0, 0x1f, 0xc0, 0x89);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLParameter.Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Name.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLParameter/Name.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2f1c0f5a-2763-4cee-90b8-2351a01fc089")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PRINGLParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PRINGLParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PRINGLParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PRINGLParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PRINGLParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PRINGLParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IncentiveElement opposite domain role accessor
		/// <summary>
		/// Gets or sets IncentiveElement.
		/// Description for at.ac.tuwien.dsg.PRINGL.ElementHasParameters.PRINGLParameter
		/// </summary>
		public virtual IncentiveElement IncentiveElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.PRINGLParameterDomainRoleId) as IncentiveElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.PRINGLParameterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass Filter
	/// Description for at.ac.tuwien.dsg.PRINGL.Filter
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Filter.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Filter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f12dfe20-effe-4bac-a2a6-09e0465ae1bf")]
	public partial class Filter : SimpleDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Filter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf12dfe20, 0xeffe, 0x4bac, 0xa2, 0xa6, 0x09, 0xe0, 0x46, 0x5a, 0xe1, 0xbf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Filter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Filter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region time_restr domain property code
		
		/// <summary>
		/// time_restr domain property Id.
		/// </summary>
		public static readonly global::System.Guid time_restrDomainPropertyId = new global::System.Guid(0xc7ad1d7b, 0xccac, 0x492c, 0xbd, 0x82, 0x7c, 0xfb, 0x6a, 0x75, 0x8a, 0x30);
		
		/// <summary>
		/// Storage for time_restr
		/// </summary>
		private global::System.String time_restrPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of time_restr domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.Filter.Time_restr
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Filter/time_restr.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Filter/time_restr.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c7ad1d7b-ccac-492c-bd82-7cfb6a758a30")]
		public global::System.String time_restr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return time_restrPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				time_restrPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Filter.time_restr domain property.
		/// </summary>
		internal sealed partial class time_restrPropertyHandler : DslModeling::DomainPropertyValueHandler<Filter, global::System.String>
		{
			private time_restrPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Filter.time_restr domain property value handler.
			/// </summary>
			public static readonly time_restrPropertyHandler Instance = new time_restrPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Filter.time_restr domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return time_restrDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Filter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.time_restrPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Filter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.time_restrPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region temp_spec domain property code
		
		/// <summary>
		/// temp_spec domain property Id.
		/// </summary>
		public static readonly global::System.Guid temp_specDomainPropertyId = new global::System.Guid(0x3aa5514e, 0xa36d, 0x4f73, 0x92, 0x66, 0xf1, 0x9d, 0x02, 0x18, 0x16, 0xed);
		
		/// <summary>
		/// Storage for temp_spec
		/// </summary>
		private global::System.String temp_specPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of temp_spec domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.Filter.Temp_spec
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Filter/temp_spec.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Filter/temp_spec.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3aa5514e-a36d-4f73-9266-f19d021816ed")]
		public global::System.String temp_spec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return temp_specPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				temp_specPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Filter.temp_spec domain property.
		/// </summary>
		internal sealed partial class temp_specPropertyHandler : DslModeling::DomainPropertyValueHandler<Filter, global::System.String>
		{
			private temp_specPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Filter.temp_spec domain property value handler.
			/// </summary>
			public static readonly temp_specPropertyHandler Instance = new temp_specPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Filter.temp_spec domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return temp_specDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Filter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.temp_specPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Filter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.temp_specPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region auxiliary domain property code
		
		/// <summary>
		/// auxiliary domain property Id.
		/// </summary>
		public static readonly global::System.Guid auxiliaryDomainPropertyId = new global::System.Guid(0xf9a43c7a, 0x7664, 0x45d6, 0x8b, 0xd9, 0x2d, 0xcd, 0x64, 0xe6, 0x6b, 0x76);
		
		/// <summary>
		/// Storage for auxiliary
		/// </summary>
		private global::System.String auxiliaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of auxiliary domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.Filter.Auxiliary
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Filter/auxiliary.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Filter/auxiliary.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f9a43c7a-7664-45d6-8bd9-2dcd64e66b76")]
		public global::System.String auxiliary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return auxiliaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				auxiliaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Filter.auxiliary domain property.
		/// </summary>
		internal sealed partial class auxiliaryPropertyHandler : DslModeling::DomainPropertyValueHandler<Filter, global::System.String>
		{
			private auxiliaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Filter.auxiliary domain property value handler.
			/// </summary>
			public static readonly auxiliaryPropertyHandler Instance = new auxiliaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Filter.auxiliary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return auxiliaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Filter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.auxiliaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Filter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.auxiliaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region predicate domain property code
		
		/// <summary>
		/// predicate domain property Id.
		/// </summary>
		public static readonly global::System.Guid predicateDomainPropertyId = new global::System.Guid(0x6e8afdc5, 0xd105, 0x4ed0, 0xba, 0xd7, 0x9f, 0x49, 0x68, 0x2c, 0xd9, 0xd3);
		
		/// <summary>
		/// Storage for predicate
		/// </summary>
		private global::System.String predicatePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of predicate domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.Filter.Predicate
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Filter/predicate.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Filter/predicate.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6e8afdc5-d105-4ed0-bad7-9f49682cd9d3")]
		public global::System.String predicate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return predicatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				predicatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Filter.predicate domain property.
		/// </summary>
		internal sealed partial class predicatePropertyHandler : DslModeling::DomainPropertyValueHandler<Filter, global::System.String>
		{
			private predicatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Filter.predicate domain property value handler.
			/// </summary>
			public static readonly predicatePropertyHandler Instance = new predicatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Filter.predicate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return predicateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Filter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.predicatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Filter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.predicatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass RewAction
	/// Description for at.ac.tuwien.dsg.PRINGL.RewAction
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e25876ea-5c4f-4bc3-893f-0ff800163ed8")]
	public partial class RewAction : SimpleDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// RewAction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe25876ea, 0x5c4f, 0x4bc3, 0x89, 0x3f, 0x0f, 0xf8, 0x00, 0x16, 0x3e, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RewAction(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RewAction(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region filter domain property code
		
		/// <summary>
		/// filter domain property Id.
		/// </summary>
		public static readonly global::System.Guid filterDomainPropertyId = new global::System.Guid(0xe38c5603, 0xd996, 0x4bd6, 0xa7, 0x57, 0xef, 0xfa, 0xbc, 0xed, 0x8a, 0xa4);
		
		/// <summary>
		/// Storage for filter
		/// </summary>
		private global::System.String filterPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of filter domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.RewAction.Filter
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction/filter.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction/filter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e38c5603-d996-4bd6-a757-effabced8aa4")]
		public global::System.String filter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return filterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				filterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RewAction.filter domain property.
		/// </summary>
		internal sealed partial class filterPropertyHandler : DslModeling::DomainPropertyValueHandler<RewAction, global::System.String>
		{
			private filterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RewAction.filter domain property value handler.
			/// </summary>
			public static readonly filterPropertyHandler Instance = new filterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RewAction.filter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return filterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RewAction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.filterPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RewAction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.filterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region exec_cond domain property code
		
		/// <summary>
		/// exec_cond domain property Id.
		/// </summary>
		public static readonly global::System.Guid exec_condDomainPropertyId = new global::System.Guid(0x9abeac57, 0x9cd9, 0x4a7c, 0x8b, 0x95, 0x1f, 0xde, 0x13, 0xdb, 0xa7, 0xd8);
		
		/// <summary>
		/// Storage for exec_cond
		/// </summary>
		private global::System.String exec_condPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of exec_cond domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.RewAction.Exec_cond
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction/exec_cond.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction/exec_cond.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9abeac57-9cd9-4a7c-8b95-1fde13dba7d8")]
		public global::System.String exec_cond
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return exec_condPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				exec_condPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RewAction.exec_cond domain property.
		/// </summary>
		internal sealed partial class exec_condPropertyHandler : DslModeling::DomainPropertyValueHandler<RewAction, global::System.String>
		{
			private exec_condPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RewAction.exec_cond domain property value handler.
			/// </summary>
			public static readonly exec_condPropertyHandler Instance = new exec_condPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RewAction.exec_cond domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return exec_condDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RewAction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.exec_condPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RewAction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.exec_condPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region exec_times domain property code
		
		/// <summary>
		/// exec_times domain property Id.
		/// </summary>
		public static readonly global::System.Guid exec_timesDomainPropertyId = new global::System.Guid(0xcb0728dc, 0xea00, 0x4244, 0xbe, 0xc6, 0xc6, 0x62, 0xdb, 0xf0, 0xe3, 0xef);
		
		/// <summary>
		/// Storage for exec_times
		/// </summary>
		private global::System.String exec_timesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of exec_times domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.RewAction.Exec_times
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction/exec_times.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction/exec_times.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cb0728dc-ea00-4244-bec6-c662dbf0e3ef")]
		public global::System.String exec_times
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return exec_timesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				exec_timesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RewAction.exec_times domain property.
		/// </summary>
		internal sealed partial class exec_timesPropertyHandler : DslModeling::DomainPropertyValueHandler<RewAction, global::System.String>
		{
			private exec_timesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RewAction.exec_times domain property value handler.
			/// </summary>
			public static readonly exec_timesPropertyHandler Instance = new exec_timesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RewAction.exec_times domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return exec_timesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RewAction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.exec_timesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RewAction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.exec_timesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region temp_spec domain property code
		
		/// <summary>
		/// temp_spec domain property Id.
		/// </summary>
		public static readonly global::System.Guid temp_specDomainPropertyId = new global::System.Guid(0x9f0cee37, 0x116b, 0x4fee, 0x9a, 0xdf, 0xa8, 0xd2, 0x2c, 0x4d, 0xc2, 0xb9);
		
		/// <summary>
		/// Storage for temp_spec
		/// </summary>
		private global::System.String temp_specPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of temp_spec domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.RewAction.Temp_spec
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction/temp_spec.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction/temp_spec.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9f0cee37-116b-4fee-9adf-a8d22c4dc2b9")]
		public global::System.String temp_spec
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return temp_specPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				temp_specPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RewAction.temp_spec domain property.
		/// </summary>
		internal sealed partial class temp_specPropertyHandler : DslModeling::DomainPropertyValueHandler<RewAction, global::System.String>
		{
			private temp_specPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RewAction.temp_spec domain property value handler.
			/// </summary>
			public static readonly temp_specPropertyHandler Instance = new temp_specPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RewAction.temp_spec domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return temp_specDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RewAction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.temp_specPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RewAction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.temp_specPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region action_logic domain property code
		
		/// <summary>
		/// action_logic domain property Id.
		/// </summary>
		public static readonly global::System.Guid action_logicDomainPropertyId = new global::System.Guid(0xeaf958c7, 0x50d6, 0x4a36, 0xb9, 0x2d, 0xcd, 0xc3, 0xd2, 0x28, 0x8a, 0x93);
		
		/// <summary>
		/// Storage for action_logic
		/// </summary>
		private global::System.String action_logicPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of action_logic domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.RewAction.Action_logic
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.RewAction/action_logic.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.RewAction/action_logic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("eaf958c7-50d6-4a36-b92d-cdc3d2288a93")]
		public global::System.String action_logic
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return action_logicPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				action_logicPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RewAction.action_logic domain property.
		/// </summary>
		internal sealed partial class action_logicPropertyHandler : DslModeling::DomainPropertyValueHandler<RewAction, global::System.String>
		{
			private action_logicPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RewAction.action_logic domain property value handler.
			/// </summary>
			public static readonly action_logicPropertyHandler Instance = new action_logicPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RewAction.action_logic domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return action_logicDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(RewAction element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.action_logicPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RewAction element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.action_logicPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass IncMech
	/// Description for at.ac.tuwien.dsg.PRINGL.IncMech
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d07bd543-9244-48d1-a904-89ae4b15778b")]
	public partial class IncMech : SimpleDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IncMech domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd07bd543, 0x9244, 0x48d1, 0xa9, 0x04, 0x89, 0xae, 0x4b, 0x15, 0x77, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncMech(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncMech(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region exec_cond domain property code
		
		/// <summary>
		/// exec_cond domain property Id.
		/// </summary>
		public static readonly global::System.Guid exec_condDomainPropertyId = new global::System.Guid(0x91ef2d25, 0x8dcc, 0x4d81, 0xab, 0x99, 0x79, 0x44, 0x73, 0x63, 0x4e, 0xb3);
		
		/// <summary>
		/// Storage for exec_cond
		/// </summary>
		private global::System.String exec_condPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of exec_cond domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Exec_cond
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/exec_cond.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/exec_cond.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("91ef2d25-8dcc-4d81-ab99-794473634eb3")]
		public global::System.String exec_cond
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return exec_condPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				exec_condPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.exec_cond domain property.
		/// </summary>
		internal sealed partial class exec_condPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private exec_condPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.exec_cond domain property value handler.
			/// </summary>
			public static readonly exec_condPropertyHandler Instance = new exec_condPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.exec_cond domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return exec_condDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.exec_condPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.exec_condPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region appl_restr domain property code
		
		/// <summary>
		/// appl_restr domain property Id.
		/// </summary>
		public static readonly global::System.Guid appl_restrDomainPropertyId = new global::System.Guid(0xa72a9757, 0x1391, 0x4c07, 0xa5, 0x72, 0xd0, 0x6e, 0x0d, 0x91, 0x21, 0x1c);
		
		/// <summary>
		/// Storage for appl_restr
		/// </summary>
		private global::System.String appl_restrPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of appl_restr domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Appl_restr
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/appl_restr.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/appl_restr.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a72a9757-1391-4c07-a572-d06e0d91211c")]
		public global::System.String appl_restr
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return appl_restrPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				appl_restrPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.appl_restr domain property.
		/// </summary>
		internal sealed partial class appl_restrPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private appl_restrPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.appl_restr domain property value handler.
			/// </summary>
			public static readonly appl_restrPropertyHandler Instance = new appl_restrPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.appl_restr domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return appl_restrDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.appl_restrPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.appl_restrPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region filter domain property code
		
		/// <summary>
		/// filter domain property Id.
		/// </summary>
		public static readonly global::System.Guid filterDomainPropertyId = new global::System.Guid(0xffb57ea0, 0x305c, 0x4654, 0x89, 0x20, 0x47, 0x95, 0xca, 0xe6, 0x03, 0x65);
		
		/// <summary>
		/// Storage for filter
		/// </summary>
		private global::System.String filterPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of filter domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Filter
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/filter.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/filter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ffb57ea0-305c-4654-8920-4795cae60365")]
		public global::System.String filter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return filterPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				filterPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.filter domain property.
		/// </summary>
		internal sealed partial class filterPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private filterPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.filter domain property value handler.
			/// </summary>
			public static readonly filterPropertyHandler Instance = new filterPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.filter domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return filterDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.filterPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.filterPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region inc_cond domain property code
		
		/// <summary>
		/// inc_cond domain property Id.
		/// </summary>
		public static readonly global::System.Guid inc_condDomainPropertyId = new global::System.Guid(0xfcd0ad9c, 0x9bb5, 0x4d75, 0xaf, 0x86, 0x97, 0x2b, 0x6e, 0x45, 0xee, 0xf7);
		
		/// <summary>
		/// Storage for inc_cond
		/// </summary>
		private global::System.String inc_condPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of inc_cond domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Inc_cond
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/inc_cond.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/inc_cond.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fcd0ad9c-9bb5-4d75-af86-972b6e45eef7")]
		public global::System.String inc_cond
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inc_condPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				inc_condPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.inc_cond domain property.
		/// </summary>
		internal sealed partial class inc_condPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private inc_condPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.inc_cond domain property value handler.
			/// </summary>
			public static readonly inc_condPropertyHandler Instance = new inc_condPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.inc_cond domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return inc_condDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inc_condPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inc_condPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region rew_action domain property code
		
		/// <summary>
		/// rew_action domain property Id.
		/// </summary>
		public static readonly global::System.Guid rew_actionDomainPropertyId = new global::System.Guid(0x64294e2f, 0xbdb5, 0x4f1c, 0x99, 0x44, 0xd1, 0xcd, 0x1b, 0x1b, 0xca, 0xfe);
		
		/// <summary>
		/// Storage for rew_action
		/// </summary>
		private global::System.String rew_actionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of rew_action domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Rew_action
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/rew_action.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/rew_action.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("64294e2f-bdb5-4f1c-9944-d1cd1b1bcafe")]
		public global::System.String rew_action
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rew_actionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				rew_actionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.rew_action domain property.
		/// </summary>
		internal sealed partial class rew_actionPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private rew_actionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.rew_action domain property value handler.
			/// </summary>
			public static readonly rew_actionPropertyHandler Instance = new rew_actionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.rew_action domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return rew_actionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rew_actionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.rew_actionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region prority domain property code
		
		/// <summary>
		/// prority domain property Id.
		/// </summary>
		public static readonly global::System.Guid prorityDomainPropertyId = new global::System.Guid(0x8312c9e7, 0x96d2, 0x4033, 0xae, 0x03, 0x1b, 0x68, 0xbf, 0x06, 0x58, 0x18);
		
		/// <summary>
		/// Storage for prority
		/// </summary>
		private global::System.String prorityPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of prority domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMech.Prority
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMech/prority.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMech/prority.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8312c9e7-96d2-4033-ae03-1b68bf065818")]
		public global::System.String prority
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return prorityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				prorityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMech.prority domain property.
		/// </summary>
		internal sealed partial class prorityPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMech, global::System.String>
		{
			private prorityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMech.prority domain property value handler.
			/// </summary>
			public static readonly prorityPropertyHandler Instance = new prorityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMech.prority domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return prorityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMech element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.prorityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMech element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.prorityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainClass IncLogic
	/// Description for at.ac.tuwien.dsg.PRINGL.IncLogic
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncLogic.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("14a54e41-6818-41c4-9d02-f3304c46e38c")]
	public partial class IncLogic : SimpleDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IncLogic domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14a54e41, 0x6818, 0x41c4, 0x9d, 0x02, 0xf3, 0x30, 0x4c, 0x46, 0xe3, 0x8c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncLogic(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncLogic(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubMetatype domain property code
		
		/// <summary>
		/// SubMetatype domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubMetatypeDomainPropertyId = new global::System.Guid(0x568bef63, 0x2389, 0x4faf, 0x94, 0x0e, 0xae, 0xa2, 0x64, 0x1f, 0xc8, 0x9c);
		
		/// <summary>
		/// Storage for SubMetatype
		/// </summary>
		private PRINGLSubMetatype subMetatypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SubMetatype domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncLogic.Sub Metatype
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncLogic/SubMetatype.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncLogic/SubMetatype.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("568bef63-2389-4faf-940e-aea2641fc89c")]
		public PRINGLSubMetatype SubMetatype
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subMetatypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubMetatypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncLogic.SubMetatype domain property.
		/// </summary>
		internal sealed partial class SubMetatypePropertyHandler : DslModeling::DomainPropertyValueHandler<IncLogic, PRINGLSubMetatype>
		{
			private SubMetatypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncLogic.SubMetatype domain property value handler.
			/// </summary>
			public static readonly SubMetatypePropertyHandler Instance = new SubMetatypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncLogic.SubMetatype domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubMetatypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PRINGLSubMetatype GetValue(IncLogic element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subMetatypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncLogic element, PRINGLSubMetatype newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PRINGLSubMetatype oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subMetatypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OutputType domain property code
		
		/// <summary>
		/// OutputType domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputTypeDomainPropertyId = new global::System.Guid(0xc4e7b8ee, 0x3e0f, 0x4803, 0xb8, 0x5f, 0x1d, 0x43, 0xc9, 0xbb, 0xfc, 0x1e);
		
		/// <summary>
		/// Storage for OutputType
		/// </summary>
		private global::System.String outputTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OutputType domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncLogic.Output Type
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncLogic/OutputType.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncLogic/OutputType.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c4e7b8ee-3e0f-4803-b85f-1d43c9bbfc1e")]
		public global::System.String OutputType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outputTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncLogic.OutputType domain property.
		/// </summary>
		internal sealed partial class OutputTypePropertyHandler : DslModeling::DomainPropertyValueHandler<IncLogic, global::System.String>
		{
			private OutputTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncLogic.OutputType domain property value handler.
			/// </summary>
			public static readonly OutputTypePropertyHandler Instance = new OutputTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncLogic.OutputType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncLogic element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.outputTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncLogic element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outputTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Code domain property code
		
		/// <summary>
		/// Code domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeDomainPropertyId = new global::System.Guid(0x7c9cbd35, 0x4add, 0x420a, 0xa2, 0xfd, 0x7d, 0x4a, 0xd8, 0x76, 0xf5, 0x03);
		
		/// <summary>
		/// Storage for Code
		/// </summary>
		private global::System.String codePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Code domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncLogic.Code
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncLogic/Code.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncLogic/Code.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c9cbd35-4add-420a-a2fd-7d4ad876f503")]
		public global::System.String Code
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncLogic.Code domain property.
		/// </summary>
		internal sealed partial class CodePropertyHandler : DslModeling::DomainPropertyValueHandler<IncLogic, global::System.String>
		{
			private CodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncLogic.Code domain property value handler.
			/// </summary>
			public static readonly CodePropertyHandler Instance = new CodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncLogic.Code domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncLogic element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.codePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncLogic element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass CompositeFilter
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.CompositeFilter.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.CompositeFilter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3a631bdb-acc3-4061-99b9-ae09768a1b96")]
	public abstract partial class CompositeFilterBase : CompositeDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompositeFilter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a631bdb, 0xacc3, 0x4061, 0x99, 0xb9, 0xae, 0x09, 0x76, 0x8a, 0x1b, 0x96);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CompositeFilterBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeInnerActionInstance(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance sourceInnerActionInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance;
			if (sourceInnerActionInstance1 != null)
			{
				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance sourceInnerActionInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance;
			if (sourceInnerActionInstance1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass CompositeFilter
	/// Description for at.ac.tuwien.dsg.PRINGL.CompositeFilter
	/// </summary>
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
			
	public partial class CompositeFilter : CompositeFilterBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeFilter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeFilter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass CompositeAction
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.CompositeAction.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.CompositeAction.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("cd6329ff-b6f1-4474-b2aa-6b33e1adaf65")]
	public abstract partial class CompositeActionBase : CompositeDefinition
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CompositeAction domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xcd6329ff, 0xb6f1, 0x4474, 0xb2, 0xaa, 0x6b, 0x33, 0xe1, 0xad, 0xaf, 0x65);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CompositeActionBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeInnerFilterInstance(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance sourceInnerFilterInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance;
			if (sourceInnerFilterInstance1 != null)
			{
				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance sourceInnerFilterInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance;
			if (sourceInnerFilterInstance1 != null)
			{
				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass CompositeAction
	/// Description for at.ac.tuwien.dsg.PRINGL.CompositeAction
	/// </summary>
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
			
	public partial class CompositeAction : CompositeActionBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeAction(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CompositeAction(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass Container
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Container.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Container.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("0e2290db-06cb-4065-9f36-dc43d2559038")]
	public abstract partial class ContainerBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Container domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0e2290db, 0x06cb, 0x4065, 0x9f, 0x36, 0xdc, 0x43, 0xd2, 0x55, 0x90, 0x38);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ContainerBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x00e65998, 0xd3cb, 0x440f, 0x9b, 0x9b, 0xb4, 0x98, 0x35, 0xdc, 0xda, 0x02);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.Container.Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.Container/Name.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.Container/Name.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("00e65998-d3cb-440f-9b9b-b49835dcda02")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Container.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ContainerBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Container.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Container.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ContainerBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ContainerBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InnerFilterInstances opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InnerFilterInstances.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.Container
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerFilterInstance> InnerFilterInstances
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerFilterInstance>, InnerFilterInstance>(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.ContainerDomainRoleId);
			}
		}
		#endregion
		#region InnerActionInstances opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InnerActionInstances.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.Container
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerActionInstance> InnerActionInstances
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerActionInstance>, InnerActionInstance>(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.ContainerDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance sourceInnerFilterInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance;
			if (sourceInnerFilterInstance1 != null)
			{
				// Create link for path ContainerHasInnerFilterInstances.InnerFilterInstances
				this.InnerFilterInstances.Add(sourceInnerFilterInstance1);

				return;
			}
				
			global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance sourceInnerActionInstance2 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance;
			if (sourceInnerActionInstance2 != null)
			{
				// Create link for path ContainerHasInnerActionInstances.InnerActionInstances
				this.InnerActionInstances.Add(sourceInnerActionInstance2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance sourceInnerFilterInstance1 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerFilterInstance;
			if (sourceInnerFilterInstance1 != null)
			{
				// Delete link for path ContainerHasInnerFilterInstances.InnerFilterInstances
				
				foreach (DslModeling::ElementLink link in global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.GetLinks((global::at.ac.tuwien.dsg.PRINGL.Container)this, sourceInnerFilterInstance1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.ContainerDomainRoleId, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.InnerFilterInstanceDomainRoleId);
				}

				return;
			}
				
			global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance sourceInnerActionInstance2 = sourceElement as global::at.ac.tuwien.dsg.PRINGL.InnerActionInstance;
			if (sourceInnerActionInstance2 != null)
			{
				// Delete link for path ContainerHasInnerActionInstances.InnerActionInstances
				
				foreach (DslModeling::ElementLink link in global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.GetLinks((global::at.ac.tuwien.dsg.PRINGL.Container)this, sourceInnerActionInstance2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.ContainerDomainRoleId, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.InnerActionInstanceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Container
	/// Description for at.ac.tuwien.dsg.PRINGL.Container
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public abstract partial class Container : ContainerBase
	{
		#region Constructors
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Container(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass InnerFilterInstance
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19b296cf-ae62-4883-9de0-b9314ccefef9")]
	public abstract partial class InnerFilterInstanceBase : Container
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InnerFilterInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19b296cf, 0xae62, 0x4883, 0x9d, 0xe0, 0xb9, 0x31, 0x4c, 0xce, 0xfe, 0xf9);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected InnerFilterInstanceBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Position domain property code
		
		/// <summary>
		/// Position domain property Id.
		/// </summary>
		public static readonly global::System.Guid PositionDomainPropertyId = new global::System.Guid(0x0c6a873f, 0x1754, 0x4d38, 0x96, 0xc7, 0x7f, 0xa3, 0xe0, 0xe8, 0x53, 0x66);
		
		/// <summary>
		/// Storage for Position
		/// </summary>
		private InnerShapeFlowPosition positionPropertyStorage = InnerShapeFlowPosition.Normal;
		
		/// <summary>
		/// Gets or sets the value of Position domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.Position
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/Position.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/Position.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InnerShapeFlowPosition.Normal)]
		[DslModeling::DomainObjectId("0c6a873f-1754-4d38-96c7-7fa3e0e85366")]
		public InnerShapeFlowPosition Position
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return positionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PositionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InnerFilterInstance.Position domain property.
		/// </summary>
		internal sealed partial class PositionPropertyHandler : DslModeling::DomainPropertyValueHandler<InnerFilterInstanceBase, InnerShapeFlowPosition>
		{
			private PositionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerFilterInstance.Position domain property value handler.
			/// </summary>
			public static readonly PositionPropertyHandler Instance = new PositionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerFilterInstance.Position domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PositionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InnerShapeFlowPosition GetValue(InnerFilterInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.positionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InnerFilterInstanceBase element, InnerShapeFlowPosition newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InnerShapeFlowPosition oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.positionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x5e8adbc8, 0x222b, 0x47f6, 0xbd, 0xae, 0xe6, 0x94, 0x59, 0xc6, 0xf6, 0xe3);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.Type
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/Type.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/Type.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5e8adbc8-222b-47f6-bdae-e69459c6f6e3")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InnerFilterInstance.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<InnerFilterInstanceBase, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerFilterInstance.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerFilterInstance.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InnerFilterInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InnerFilterInstanceBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region fullName domain property code
		
		/// <summary>
		/// fullName domain property Id.
		/// </summary>
		public static readonly global::System.Guid fullNameDomainPropertyId = new global::System.Guid(0x2aa9e429, 0x1175, 0x4d53, 0x87, 0x63, 0xbd, 0xf5, 0xfb, 0x62, 0x13, 0x2a);
		
		/// <summary>
		/// Gets or sets the value of fullName domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerFilterInstance.Full Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/fullName.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerFilterInstance/fullName.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("2aa9e429-1175-4d53-8763-bdf5fb62132a")]
		public global::System.String fullName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fullNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the InnerFilterInstance.fullName domain property.
		/// </summary>
		internal sealed partial class fullNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<InnerFilterInstanceBase, global::System.String>
		{
			private fullNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerFilterInstance.fullName domain property value handler.
			/// </summary>
			public static readonly fullNamePropertyHandler Instance = new fullNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerFilterInstance.fullName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return fullNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InnerFilterInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for fullName because its Kind is
				// set to Calculated. Please provide the GetfullNameValue()
				// method on the domain class.
				return element.GetfullNameValue();
			}
		
		}
		
		#endregion
		#region Container opposite domain role accessor
		/// <summary>
		/// Gets or sets Container.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.InnerFilterInstance
		/// </summary>
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.InnerFilterInstanceDomainRoleId) as Container;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.InnerFilterInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region FilterFlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FilterFlowTo.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.InnerFilterFlow.SourceInnerFilterInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerFilterInstance> FilterFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerFilterInstance>, InnerFilterInstance>(global::at.ac.tuwien.dsg.PRINGL.InnerFilterFlow.SourceInnerFilterInstanceDomainRoleId);
			}
		}
		#endregion
		#region FilterFlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of FilterFlowFrom.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.InnerFilterFlow.TargetInnerFilterInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerFilterInstance> FilterFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerFilterInstance>, InnerFilterInstance>(global::at.ac.tuwien.dsg.PRINGL.InnerFilterFlow.TargetInnerFilterInstanceDomainRoleId);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass InnerFilterInstance
	/// Description for at.ac.tuwien.dsg.PRINGL.InnerFilterInstance
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class InnerFilterInstance : InnerFilterInstanceBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerFilterInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerFilterInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass InnerActionInstance
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("54d9052f-a12a-4cae-b4db-24efd6f37a6e")]
	public abstract partial class InnerActionInstanceBase : Container
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InnerActionInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54d9052f, 0xa12a, 0x4cae, 0xb4, 0xdb, 0x24, 0xef, 0xd6, 0xf3, 0x7a, 0x6e);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected InnerActionInstanceBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Position domain property code
		
		/// <summary>
		/// Position domain property Id.
		/// </summary>
		public static readonly global::System.Guid PositionDomainPropertyId = new global::System.Guid(0x35c74205, 0x4c5b, 0x4715, 0x93, 0xe1, 0x68, 0x28, 0x58, 0xb8, 0xc4, 0x20);
		
		/// <summary>
		/// Storage for Position
		/// </summary>
		private InnerShapeFlowPosition positionPropertyStorage = InnerShapeFlowPosition.Normal;
		
		/// <summary>
		/// Gets or sets the value of Position domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerActionInstance.Position
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/Position.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/Position.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InnerShapeFlowPosition.Normal)]
		[DslModeling::DomainObjectId("35c74205-4c5b-4715-93e1-682858b8c420")]
		public InnerShapeFlowPosition Position
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return positionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PositionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InnerActionInstance.Position domain property.
		/// </summary>
		internal sealed partial class PositionPropertyHandler : DslModeling::DomainPropertyValueHandler<InnerActionInstanceBase, InnerShapeFlowPosition>
		{
			private PositionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerActionInstance.Position domain property value handler.
			/// </summary>
			public static readonly PositionPropertyHandler Instance = new PositionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerActionInstance.Position domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PositionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InnerShapeFlowPosition GetValue(InnerActionInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.positionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InnerActionInstanceBase element, InnerShapeFlowPosition newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InnerShapeFlowPosition oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.positionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xf0a6284c, 0x0199, 0x43f4, 0xbb, 0x81, 0xce, 0xe7, 0x35, 0x8b, 0xc3, 0x77);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerActionInstance.Type
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/Type.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/Type.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f0a6284c-0199-43f4-bb81-cee7358bc377")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InnerActionInstance.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<InnerActionInstanceBase, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerActionInstance.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerActionInstance.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InnerActionInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InnerActionInstanceBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region fullName domain property code
		
		/// <summary>
		/// fullName domain property Id.
		/// </summary>
		public static readonly global::System.Guid fullNameDomainPropertyId = new global::System.Guid(0x79d5ec9c, 0x2bdb, 0x4846, 0x89, 0x47, 0x72, 0x51, 0xd7, 0x7f, 0xe5, 0x09);
		
		/// <summary>
		/// Gets or sets the value of fullName domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerActionInstance.Full Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/fullName.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerActionInstance/fullName.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("79d5ec9c-2bdb-4846-8947-7251d77fe509")]
		public global::System.String fullName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fullNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the InnerActionInstance.fullName domain property.
		/// </summary>
		internal sealed partial class fullNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<InnerActionInstanceBase, global::System.String>
		{
			private fullNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InnerActionInstance.fullName domain property value handler.
			/// </summary>
			public static readonly fullNamePropertyHandler Instance = new fullNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InnerActionInstance.fullName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return fullNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InnerActionInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for fullName because its Kind is
				// set to Calculated. Please provide the GetfullNameValue()
				// method on the domain class.
				return element.GetfullNameValue();
			}
		
		}
		
		#endregion
		#region Container opposite domain role accessor
		/// <summary>
		/// Gets or sets Container.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.InnerActionInstance
		/// </summary>
		public virtual Container Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.InnerActionInstanceDomainRoleId) as Container;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.InnerActionInstanceDomainRoleId, value);
			}
		}
		#endregion
		#region ActionFlowTo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ActionFlowTo.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.InnerActionFlow.SourceInnerActionInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerActionInstance> ActionFlowTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerActionInstance>, InnerActionInstance>(global::at.ac.tuwien.dsg.PRINGL.InnerActionFlow.SourceInnerActionInstanceDomainRoleId);
			}
		}
		#endregion
		#region ActionFlowFrom opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ActionFlowFrom.
		/// Description for
		/// at.ac.tuwien.dsg.PRINGL.InnerActionFlow.TargetInnerActionInstance
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InnerActionInstance> ActionFlowFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<InnerActionInstance>, InnerActionInstance>(global::at.ac.tuwien.dsg.PRINGL.InnerActionFlow.TargetInnerActionInstanceDomainRoleId);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass InnerActionInstance
	/// Description for at.ac.tuwien.dsg.PRINGL.InnerActionInstance
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class InnerActionInstance : InnerActionInstanceBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerActionInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InnerActionInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// Double-derived base class for DomainClass IncMechInstance
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8e4bbe11-0816-4611-8016-fa55f1ce590a")]
	public abstract partial class IncMechInstanceBase : IncentiveElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IncMechInstance domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8e4bbe11, 0x0816, 0x4611, 0x80, 0x16, 0xfa, 0x55, 0xf1, 0xce, 0x59, 0x0a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IncMechInstanceBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region priority domain property code
		
		/// <summary>
		/// priority domain property Id.
		/// </summary>
		public static readonly global::System.Guid priorityDomainPropertyId = new global::System.Guid(0x814b5501, 0xfbf6, 0x40ab, 0xa6, 0xb2, 0x75, 0xa8, 0xa4, 0x2c, 0xef, 0x59);
		
		/// <summary>
		/// Storage for priority
		/// </summary>
		private global::System.Int16 priorityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of priority domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMechInstance.Priority
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/priority.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/priority.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("814b5501-fbf6-40ab-a6b2-75a8a42cef59")]
		public global::System.Int16 priority
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return priorityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				priorityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMechInstance.priority domain property.
		/// </summary>
		internal sealed partial class priorityPropertyHandler : DslModeling::DomainPropertyValueHandler<IncMechInstanceBase, global::System.Int16>
		{
			private priorityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMechInstance.priority domain property value handler.
			/// </summary>
			public static readonly priorityPropertyHandler Instance = new priorityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMechInstance.priority domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return priorityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(IncMechInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.priorityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMechInstanceBase element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.priorityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x49cd6feb, 0xa22d, 0x4dc7, 0x94, 0x2b, 0x3f, 0x5b, 0xb4, 0x97, 0x7b, 0x61);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMechInstance.Type
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/Type.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/Type.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("49cd6feb-a22d-4dc7-942b-3f5bb4977b61")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IncMechInstance.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<IncMechInstanceBase, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMechInstance.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMechInstance.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMechInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IncMechInstanceBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region fullName domain property code
		
		/// <summary>
		/// fullName domain property Id.
		/// </summary>
		public static readonly global::System.Guid fullNameDomainPropertyId = new global::System.Guid(0x6eeffc00, 0xe0e6, 0x47f0, 0xa3, 0xb4, 0xb6, 0x38, 0xc2, 0xee, 0x9e, 0xa5);
		
		/// <summary>
		/// Gets or sets the value of fullName domain property.
		/// Description for at.ac.tuwien.dsg.PRINGL.IncMechInstance.Full Name
		/// </summary>
		[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/fullName.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.IncMechInstance/fullName.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("6eeffc00-e0e6-47f0-a3b4-b638c2ee9ea5")]
		public global::System.String fullName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fullNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the IncMechInstance.fullName domain property.
		/// </summary>
		internal sealed partial class fullNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<IncMechInstanceBase, global::System.String>
		{
			private fullNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IncMechInstance.fullName domain property value handler.
			/// </summary>
			public static readonly fullNamePropertyHandler Instance = new fullNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IncMechInstance.fullName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return fullNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IncMechInstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for fullName because its Kind is
				// set to Calculated. Please provide the GetfullNameValue()
				// method on the domain class.
				return element.GetfullNameValue();
			}
		
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass IncMechInstance
	/// Description for at.ac.tuwien.dsg.PRINGL.IncMechInstance
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class IncMechInstance : IncMechInstanceBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncMechInstance(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IncMechInstance(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
