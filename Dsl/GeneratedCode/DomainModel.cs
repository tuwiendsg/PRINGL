//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainModel PRINGLDomainModel
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGL
	/// </summary>
	[DslDesign::DisplayNameResource("at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel.DisplayName", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("b0401a85-18d0-402f-adfd-a0dd2abeda46")]
	public partial class PRINGLDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// PRINGLDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xb0401a85, 0x18d0, 0x402f, 0xad, 0xfd, 0xa0, 0xdd, 0x2a, 0xbe, 0xda, 0x46);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public PRINGLDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(IncentiveStrategy),
				typeof(IncentiveElement),
				typeof(SimpleDefinition),
				typeof(CompositeDefinition),
				typeof(PRINGLDefinition),
				typeof(PRINGLInstance),
				typeof(PRINGLParameter),
				typeof(Filter),
				typeof(RewAction),
				typeof(IncMech),
				typeof(IncLogic),
				typeof(CompositeFilter),
				typeof(CompositeAction),
				typeof(Container),
				typeof(InnerFilterInstance),
				typeof(InnerActionInstance),
				typeof(IncMechInstance),
				typeof(IncentiveStrategyHasIncentiveElements),
				typeof(ElementHasParameters),
				typeof(DefinitionReferencesInstance),
				typeof(ContainerHasInnerFilterInstances),
				typeof(ContainerHasInnerActionInstances),
				typeof(InnerFilterFlow),
				typeof(InnerActionFlow),
				typeof(PRINGLDiagram),
				typeof(FilterFlowConnector),
				typeof(ActionFlowConnector),
				typeof(InstanceReferenceConnector),
				typeof(CompositeFilterShape),
				typeof(CompositeActionShape),
				typeof(InstanceShape),
				typeof(FilterShape),
				typeof(RewActionShape),
				typeof(IncMechShape),
				typeof(IncLogicShape),
				typeof(IncMechInstanceShape),
				typeof(InnerFilterShape),
				typeof(InnerActionShape),
				typeof(global::at.ac.tuwien.dsg.PRINGL.FixUpDiagram),
				typeof(global::at.ac.tuwien.dsg.PRINGL.DecoratorPropertyChanged),
				typeof(global::at.ac.tuwien.dsg.PRINGL.ConnectorRolePlayerChanged),
				typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemAddRule),
				typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemDeleteRule),
				typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerChangeRule),
				typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(IncentiveStrategy), "StrategyName", IncentiveStrategy.StrategyNameDomainPropertyId, typeof(IncentiveStrategy.StrategyNamePropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLInstance), "Metatype", PRINGLInstance.MetatypeDomainPropertyId, typeof(PRINGLInstance.MetatypePropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLInstance), "SubMetatype", PRINGLInstance.SubMetatypeDomainPropertyId, typeof(PRINGLInstance.SubMetatypePropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLParameter), "Type", PRINGLParameter.TypeDomainPropertyId, typeof(PRINGLParameter.TypePropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLParameter), "InitialValue", PRINGLParameter.InitialValueDomainPropertyId, typeof(PRINGLParameter.InitialValuePropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLParameter), "Propagation", PRINGLParameter.PropagationDomainPropertyId, typeof(PRINGLParameter.PropagationPropertyHandler)),
				new DomainMemberInfo(typeof(PRINGLParameter), "Name", PRINGLParameter.NameDomainPropertyId, typeof(PRINGLParameter.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Filter), "time_restr", Filter.time_restrDomainPropertyId, typeof(Filter.time_restrPropertyHandler)),
				new DomainMemberInfo(typeof(Filter), "temp_spec", Filter.temp_specDomainPropertyId, typeof(Filter.temp_specPropertyHandler)),
				new DomainMemberInfo(typeof(Filter), "auxiliary", Filter.auxiliaryDomainPropertyId, typeof(Filter.auxiliaryPropertyHandler)),
				new DomainMemberInfo(typeof(Filter), "predicate", Filter.predicateDomainPropertyId, typeof(Filter.predicatePropertyHandler)),
				new DomainMemberInfo(typeof(RewAction), "filter", RewAction.filterDomainPropertyId, typeof(RewAction.filterPropertyHandler)),
				new DomainMemberInfo(typeof(RewAction), "exec_cond", RewAction.exec_condDomainPropertyId, typeof(RewAction.exec_condPropertyHandler)),
				new DomainMemberInfo(typeof(RewAction), "exec_times", RewAction.exec_timesDomainPropertyId, typeof(RewAction.exec_timesPropertyHandler)),
				new DomainMemberInfo(typeof(RewAction), "temp_spec", RewAction.temp_specDomainPropertyId, typeof(RewAction.temp_specPropertyHandler)),
				new DomainMemberInfo(typeof(RewAction), "action_logic", RewAction.action_logicDomainPropertyId, typeof(RewAction.action_logicPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "exec_cond", IncMech.exec_condDomainPropertyId, typeof(IncMech.exec_condPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "appl_restr", IncMech.appl_restrDomainPropertyId, typeof(IncMech.appl_restrPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "filter", IncMech.filterDomainPropertyId, typeof(IncMech.filterPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "inc_cond", IncMech.inc_condDomainPropertyId, typeof(IncMech.inc_condPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "rew_action", IncMech.rew_actionDomainPropertyId, typeof(IncMech.rew_actionPropertyHandler)),
				new DomainMemberInfo(typeof(IncMech), "prority", IncMech.prorityDomainPropertyId, typeof(IncMech.prorityPropertyHandler)),
				new DomainMemberInfo(typeof(IncLogic), "SubMetatype", IncLogic.SubMetatypeDomainPropertyId, typeof(IncLogic.SubMetatypePropertyHandler)),
				new DomainMemberInfo(typeof(IncLogic), "OutputType", IncLogic.OutputTypeDomainPropertyId, typeof(IncLogic.OutputTypePropertyHandler)),
				new DomainMemberInfo(typeof(IncLogic), "Code", IncLogic.CodeDomainPropertyId, typeof(IncLogic.CodePropertyHandler)),
				new DomainMemberInfo(typeof(Container), "Name", Container.NameDomainPropertyId, typeof(Container.NamePropertyHandler)),
				new DomainMemberInfo(typeof(InnerFilterInstance), "Position", InnerFilterInstance.PositionDomainPropertyId, typeof(InnerFilterInstance.PositionPropertyHandler)),
				new DomainMemberInfo(typeof(InnerFilterInstance), "Type", InnerFilterInstance.TypeDomainPropertyId, typeof(InnerFilterInstance.TypePropertyHandler)),
				new DomainMemberInfo(typeof(InnerFilterInstance), "fullName", InnerFilterInstance.fullNameDomainPropertyId, typeof(InnerFilterInstance.fullNamePropertyHandler)),
				new DomainMemberInfo(typeof(InnerActionInstance), "Position", InnerActionInstance.PositionDomainPropertyId, typeof(InnerActionInstance.PositionPropertyHandler)),
				new DomainMemberInfo(typeof(InnerActionInstance), "Type", InnerActionInstance.TypeDomainPropertyId, typeof(InnerActionInstance.TypePropertyHandler)),
				new DomainMemberInfo(typeof(InnerActionInstance), "fullName", InnerActionInstance.fullNameDomainPropertyId, typeof(InnerActionInstance.fullNamePropertyHandler)),
				new DomainMemberInfo(typeof(IncMechInstance), "priority", IncMechInstance.priorityDomainPropertyId, typeof(IncMechInstance.priorityPropertyHandler)),
				new DomainMemberInfo(typeof(IncMechInstance), "Type", IncMechInstance.TypeDomainPropertyId, typeof(IncMechInstance.TypePropertyHandler)),
				new DomainMemberInfo(typeof(IncMechInstance), "fullName", IncMechInstance.fullNameDomainPropertyId, typeof(IncMechInstance.fullNamePropertyHandler)),
				new DomainMemberInfo(typeof(InnerFilterFlow), "IsComplemented", InnerFilterFlow.IsComplementedDomainPropertyId, typeof(InnerFilterFlow.IsComplementedPropertyHandler)),
				new DomainMemberInfo(typeof(InnerActionFlow), "IsComplemented", InnerActionFlow.IsComplementedDomainPropertyId, typeof(InnerActionFlow.IsComplementedPropertyHandler)),
				new DomainMemberInfo(typeof(InnerActionFlow), "Delay", InnerActionFlow.DelayDomainPropertyId, typeof(InnerActionFlow.DelayPropertyHandler)),
				new DomainMemberInfo(typeof(CompositeFilterShape), "FillColor", CompositeFilterShape.FillColorDomainPropertyId, typeof(CompositeFilterShape.FillColorPropertyHandler)),
				new DomainMemberInfo(typeof(CompositeFilterShape), "FillGradientMode", CompositeFilterShape.FillGradientModeDomainPropertyId, typeof(CompositeFilterShape.FillGradientModePropertyHandler)),
				new DomainMemberInfo(typeof(CompositeActionShape), "FillColor", CompositeActionShape.FillColorDomainPropertyId, typeof(CompositeActionShape.FillColorPropertyHandler)),
				new DomainMemberInfo(typeof(CompositeActionShape), "FillGradientMode", CompositeActionShape.FillGradientModeDomainPropertyId, typeof(CompositeActionShape.FillGradientModePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(IncentiveStrategyHasIncentiveElements), "IncentiveStrategy", IncentiveStrategyHasIncentiveElements.IncentiveStrategyDomainRoleId),
				new DomainRolePlayerInfo(typeof(IncentiveStrategyHasIncentiveElements), "IncentiveElement", IncentiveStrategyHasIncentiveElements.IncentiveElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasParameters), "IncentiveElement", ElementHasParameters.IncentiveElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasParameters), "PRINGLParameter", ElementHasParameters.PRINGLParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(DefinitionReferencesInstance), "SimpleDefinition", DefinitionReferencesInstance.SimpleDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(DefinitionReferencesInstance), "PRINGLInstance", DefinitionReferencesInstance.PRINGLInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerHasInnerFilterInstances), "Container", ContainerHasInnerFilterInstances.ContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerHasInnerFilterInstances), "InnerFilterInstance", ContainerHasInnerFilterInstances.InnerFilterInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerHasInnerActionInstances), "Container", ContainerHasInnerActionInstances.ContainerDomainRoleId),
				new DomainRolePlayerInfo(typeof(ContainerHasInnerActionInstances), "InnerActionInstance", ContainerHasInnerActionInstances.InnerActionInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerFilterFlow), "SourceInnerFilterInstance", InnerFilterFlow.SourceInnerFilterInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerFilterFlow), "TargetInnerFilterInstance", InnerFilterFlow.TargetInnerFilterInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerActionFlow), "SourceInnerActionInstance", InnerActionFlow.SourceInnerActionInstanceDomainRoleId),
				new DomainRolePlayerInfo(typeof(InnerActionFlow), "TargetInnerActionInstance", InnerActionFlow.TargetInnerActionInstanceDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(31);
				createElementMap.Add(typeof(IncentiveStrategy), 0);
				createElementMap.Add(typeof(PRINGLInstance), 1);
				createElementMap.Add(typeof(PRINGLParameter), 2);
				createElementMap.Add(typeof(Filter), 3);
				createElementMap.Add(typeof(RewAction), 4);
				createElementMap.Add(typeof(IncMech), 5);
				createElementMap.Add(typeof(IncLogic), 6);
				createElementMap.Add(typeof(CompositeFilter), 7);
				createElementMap.Add(typeof(CompositeAction), 8);
				createElementMap.Add(typeof(InnerFilterInstance), 9);
				createElementMap.Add(typeof(InnerActionInstance), 10);
				createElementMap.Add(typeof(IncMechInstance), 11);
				createElementMap.Add(typeof(PRINGLDiagram), 12);
				createElementMap.Add(typeof(FilterFlowConnector), 13);
				createElementMap.Add(typeof(ActionFlowConnector), 14);
				createElementMap.Add(typeof(InstanceReferenceConnector), 15);
				createElementMap.Add(typeof(CompositeFilterShape), 16);
				createElementMap.Add(typeof(CompositeActionShape), 17);
				createElementMap.Add(typeof(InstanceShape), 18);
				createElementMap.Add(typeof(FilterShape), 19);
				createElementMap.Add(typeof(RewActionShape), 20);
				createElementMap.Add(typeof(IncMechShape), 21);
				createElementMap.Add(typeof(IncLogicShape), 22);
				createElementMap.Add(typeof(IncMechInstanceShape), 23);
				createElementMap.Add(typeof(InnerFilterShape), 24);
				createElementMap.Add(typeof(InnerActionShape), 25);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new IncentiveStrategy(partition, propertyAssignments);
				case 1: return new PRINGLInstance(partition, propertyAssignments);
				case 2: return new PRINGLParameter(partition, propertyAssignments);
				case 3: return new Filter(partition, propertyAssignments);
				case 4: return new RewAction(partition, propertyAssignments);
				case 5: return new IncMech(partition, propertyAssignments);
				case 6: return new IncLogic(partition, propertyAssignments);
				case 7: return new CompositeFilter(partition, propertyAssignments);
				case 8: return new CompositeAction(partition, propertyAssignments);
				case 9: return new InnerFilterInstance(partition, propertyAssignments);
				case 10: return new InnerActionInstance(partition, propertyAssignments);
				case 11: return new IncMechInstance(partition, propertyAssignments);
				case 12: return new PRINGLDiagram(partition, propertyAssignments);
				case 13: return new FilterFlowConnector(partition, propertyAssignments);
				case 14: return new ActionFlowConnector(partition, propertyAssignments);
				case 15: return new InstanceReferenceConnector(partition, propertyAssignments);
				case 16: return new CompositeFilterShape(partition, propertyAssignments);
				case 17: return new CompositeActionShape(partition, propertyAssignments);
				case 18: return new InstanceShape(partition, propertyAssignments);
				case 19: return new FilterShape(partition, propertyAssignments);
				case 20: return new RewActionShape(partition, propertyAssignments);
				case 21: return new IncMechShape(partition, propertyAssignments);
				case 22: return new IncLogicShape(partition, propertyAssignments);
				case 23: return new IncMechInstanceShape(partition, propertyAssignments);
				case 24: return new InnerFilterShape(partition, propertyAssignments);
				case 25: return new InnerActionShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(7);
				createElementLinkMap.Add(typeof(IncentiveStrategyHasIncentiveElements), 0);
				createElementLinkMap.Add(typeof(ElementHasParameters), 1);
				createElementLinkMap.Add(typeof(DefinitionReferencesInstance), 2);
				createElementLinkMap.Add(typeof(ContainerHasInnerFilterInstances), 3);
				createElementLinkMap.Add(typeof(ContainerHasInnerActionInstances), 4);
				createElementLinkMap.Add(typeof(InnerFilterFlow), 5);
				createElementLinkMap.Add(typeof(InnerActionFlow), 6);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new IncentiveStrategyHasIncentiveElements(partition, roleAssignments, propertyAssignments);
				case 1: return new ElementHasParameters(partition, roleAssignments, propertyAssignments);
				case 2: return new DefinitionReferencesInstance(partition, roleAssignments, propertyAssignments);
				case 3: return new ContainerHasInnerFilterInstances(partition, roleAssignments, propertyAssignments);
				case 4: return new ContainerHasInnerActionInstances(partition, roleAssignments, propertyAssignments);
				case 5: return new InnerFilterFlow(partition, roleAssignments, propertyAssignments);
				case 6: return new InnerActionFlow(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PRINGLDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (PRINGLDomainModel.resourceManager == null)
				{
					PRINGLDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(PRINGLDomainModel).Assembly);
				}
				return PRINGLDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return PRINGLDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return PRINGLDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (PRINGLDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new PRINGLCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					PRINGLDomainModel.copyClosure = copyFilter;
				}
				return PRINGLDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (PRINGLDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new PRINGLDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					PRINGLDomainModel.removeClosure = removeFilter;
				}
				return PRINGLDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::at.ac.tuwien.dsg.PRINGL.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PRINGLDeleteClosure : PRINGLDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PRINGLDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PRINGLDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public PRINGLDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::at.ac.tuwien.dsg.PRINGL.IncentiveStrategyHasIncentiveElements.IncentiveElementDomainRoleId, true);
			DomainRoles.Add(global::at.ac.tuwien.dsg.PRINGL.ElementHasParameters.PRINGLParameterDomainRoleId, true);
			DomainRoles.Add(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerFilterInstances.InnerFilterInstanceDomainRoleId, true);
			DomainRoles.Add(global::at.ac.tuwien.dsg.PRINGL.ContainerHasInnerActionInstances.InnerActionInstanceDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PRINGLCopyClosure : PRINGLCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PRINGLCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class PRINGLCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PRINGLCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainEnumeration: PRINGLSubMetatype
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PRINGLSubMetatype
	{
		/// <summary>
		/// TimeLogic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.TimeLogic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/TimeLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		TimeLogic = 5,
		/// <summary>
		/// StructureLogic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.StructureLogic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/StructureLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		StructureLogic = 4,
		/// <summary>
		/// PredicateLogic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.PredicateLogic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/PredicateLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		PredicateLogic = 3,
		/// <summary>
		/// FilterLogic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.FilterLogic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/FilterLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		FilterLogic = 2,
		/// <summary>
		/// ActionLogic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.ActionLogic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/ActionLogic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		ActionLogic = 1,
		/// <summary>
		/// None
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype.None
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLSubMetatype/None.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		None = 0,
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainEnumeration: InnerShapeFlowPosition
	/// Description for at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum InnerShapeFlowPosition
	{
		/// <summary>
		/// Initial
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition.Initial
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition/Initial.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Initial = 1,
		/// <summary>
		/// Final
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition.Final
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition/Final.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Final = -1,
		/// <summary>
		/// Normal
		/// Description for at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition.Normal
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.InnerShapeFlowPosition/Normal.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Normal = 0,
	}
}
namespace at.ac.tuwien.dsg.PRINGL
{
	/// <summary>
	/// DomainEnumeration: PRINGLMetatype
	/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLMetatype
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PRINGLMetatype
	{
		/// <summary>
		/// Filter
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLMetatype.Filter
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLMetatype/Filter.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Filter,
		/// <summary>
		/// Action
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLMetatype.Action
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLMetatype/Action.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Action,
		/// <summary>
		/// Logic
		/// Description for at.ac.tuwien.dsg.PRINGL.PRINGLMetatype.Logic
		/// </summary>
		[DslDesign::DescriptionResource("at.ac.tuwien.dsg.PRINGL.PRINGLMetatype/Logic.Description", typeof(global::at.ac.tuwien.dsg.PRINGL.PRINGLDomainModel), "at.ac.tuwien.dsg.PRINGL.GeneratedCode.DomainModelResx")]
		Logic,
	}
}

